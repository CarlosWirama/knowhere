{"version":3,"sources":["modules/shortestPathLogics/dijkstra.js","modules/shortestPathLogics/initializeData.js","modules/shortestPathLogics/index.js","constants/uiTexts.js","modules/InputSection.js","modules/RoutesSection/LineBadge.js","modules/RoutesSection/Step.js","modules/RoutesSection/OptionExpandable.js","modules/RoutesSection/index.js","App.js","serviceWorker.js","index.js"],"names":["dijkstra","graph","startNode","endNode","distances","Object","defineProperty","prevs","destinationReached","_loop","nodeDistances","currentNodeName","keys","reduce","a","b","adjacent","previousNodes","filter","station","prev","name","length","findNeighborNodes","forEach","neighbor","undefined","neighborsPreviousStations","newNeighborsPreviousStation","line","neighborDistance","push","builtRoutes","initialPath","tracePath","listOfAllPrevNodes","destination","builtPath","i","newPath","toConsumableArray","_prevs$i","_prevs$","lines","EW","NS","NE","DT","CC","CE","CG","TE","JS","JW","JE","SE","SW","PE","PW","BP","stationNames","stations","stationLine","stationNumber","Array","isArray","number","stationWithAdjacent","stationCode","findAdjacent","lineCode","no","builtAdjacent","stationsinLine","prevStation","nextStation","checkDupicateAndPushAdjacent","newAdjacent","sort","join","findAdjacentInLine","addSteps","route","currentSteps","steps","stopCount","addNewInterchange","interchangeCount","console","log","stationMap","SEARCH_PLACEHOLDER","InputSection","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setDestinationInputRef","ref","destInput","state","startingStation","destinationStation","onChange","bind","assertThisInitialized","onSubmit","onClick","e","_e$target","target","value","setState","_this$state","submitAction","stopPropagation","_this2","react_default","createElement","Container","InputField","label","collapsed","onKeyPress","key","focus","setRef","PrimaryButton","fullWidth","React","PureComponent","InputFieldContainer","InputFieldText","Label","ReadOnlyValue","StationInput","placeholder","Text","inputRef","styled","div","_templateObject","_templateObject2","span","_templateObject3","_templateObject4","Input","_templateObject5","_templateObject6","Button","attrs","variant","color","_templateObject7","LineBadge","_ref","rawLine","indexOf","Badge","split","map","optionalLine","LineContainer","LineBadge_templateObject","children","LineBadge_templateObject2","getLineColor","Step","_props$step","step","StyledListItem","InlineBadgeContainer","concat","StopCount","Step_templateObject","ListItem","Step_templateObject2","Step_templateObject3","OptionExpandable","_props$option","option","stopOverview","changeOverview","OptionExpandable_Container","expanded","Option","button","ExpendableHeader","StopOverview","icons_index_es","index_es","in","StepsContainer","OptionExpandable_templateObject","ListItemText","OptionExpandable_templateObject2","List","OptionExpandable_templateObject3","OptionExpandable_templateObject4","OptionExpandable_templateObject5","RoutesSection","RoutesSection_Container","subheader","routeOptions","expandedIndex","onClickExpandable","Component","RoutesSection_templateObject","App","isInputCollapsed","onSearch","collapseInput","start","end","paths","JSON","parse","stringify","path","previousLine","_path$pop","pop","splittedCurrentLine","splittedPreviousLine","intersects","findShortestRoute","index","hasResult","Home","InputSection_InputSection","RoutesSection_RoutesSection","App_templateObject","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4oJAAe,SAASA,EAASC,EAAOC,EAAWC,GACjD,IAAMC,EAASC,OAAAC,EAAA,EAAAD,CAAA,GAAMH,EAAY,GAC3BK,EAAQ,GACVC,GAAqB,EAHiCC,EAAA,WASxD,IA8C4BC,EA9CtBC,GA8CsBD,EA9CmBN,EA+C1CC,OACJO,KAAKF,GACLG,OAAO,SAACC,EAAGC,GAAJ,OAAUL,EAAcI,GAAKJ,EAAcK,GAAKD,EAAIC,KAhDzDJ,IAAoBR,IAGrBK,GAAqB,EACFJ,EAAUO,IA+CnC,SAA2BV,EAAOU,EAAiBJ,GAAO,IAChDS,EAAaf,EAAMU,GAAnBK,SAEFC,EAAgBV,EAAMI,IAAoB,GAChD,OAAOK,EAASE,OAAO,SAAAC,GAAO,OACwC,IAApEF,EAAcC,OAAO,SAAAE,GAAI,OAAIA,EAAKC,OAASF,EAAQE,OAAMC,SAlDzDC,CAAkBtB,EAAOU,EAAiBJ,GAAOiB,QAAQ,SAAAC,QAG1BC,IAAzBnB,EAAMkB,EAASJ,QAAqBd,EAAMkB,EAASJ,MAAQ,IAC/D,IAAMM,EAA4BpB,EAAMkB,EAASJ,MAC3CO,EAA8B,CAAEP,KAAMV,EAAiBkB,KAAMJ,EAASI,MACtEC,EAAmB1B,EAAUO,GAAmB,EACtDP,EAAUqB,EAASJ,MAAQS,EAC3BH,EAA0BI,KAAKH,YAE1BxB,EAAUO,IArBnB,GAAGF,WAsBMD,GAAsBH,OAAOO,KAAKL,GAAOe,OAAS,KAC3D,IAAKd,EAAoB,KAAM,0BAC/B,IAAMwB,EAAc,GACdC,EAAc,GAIpB,OAHAD,EAAYD,KAAKE,GAMnB,SAASC,EAAUC,EAAoBC,EAAaJ,EAAaK,GAC/D,IAAM9B,EAAQ4B,EAAmBC,GAEjC,IAAI7B,EAAO,OAEX,IAAI,IAAI+B,EAAI,EAAGA,EAAI/B,EAAMe,OAAQgB,IAAK,CACpC,IAAMC,EAAOlC,OAAAmC,EAAA,EAAAnC,CAAOgC,GADgBI,EAEblC,EAAM+B,GAArBjB,EAF4BoB,EAE5BpB,KAAMQ,EAFsBY,EAEtBZ,KACdU,EAAQR,KAAK,CAAEK,cAAaP,SAC5BG,EAAYD,KAAKQ,GACjBL,EAAUC,EAAoBd,EAAMW,EAAaO,GAVuB,IAAAG,EAanDnC,EAAM,GAArBc,EAbkEqB,EAalErB,KAAMQ,EAb4Da,EAa5Db,KACdQ,EAAUN,KAAK,CAAEK,cAAaP,SAC9BK,EAAUC,EAAoBd,EAAMW,EAAaK,GApBjDH,CAAU3B,EAAOJ,EAAS6B,EAAaC,GAEhCD,cChCHW,EAAQ,CACZC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,IAGAC,EAAevD,OAAOO,KAAKiD,GAGjCD,EAAapC,QAAQ,SAAAH,GACnBhB,OAAOO,KAAKiD,EAASxC,IAAOG,QAAQ,SAAAK,GAClC,IAAMiC,EAAcnB,EAAMd,GACtBkC,EAAgBF,EAASxC,GAAMQ,GAC/BmC,MAAMC,QAAQF,GAChBA,EAAcvC,QAAQ,SAAA0C,GACpBJ,EAAYI,GAAU7C,IAGxByC,EAAYC,GAAiB1C,MAKnC,IAAM8C,EAAsB,GAC5BP,EAAapC,QAAQ,SAAAH,GACnB,IAAM+C,EAAcP,EAASxC,GAC7B8C,EAAoB9C,GAAQ,CAC1BQ,KAAMxB,OAAOO,KAAKwD,GAClBpD,SAAUqD,EAAaD,MAIZD,QAEf,SAASE,EAAaD,GACpB,IAAMpD,EAAW,GAMjB,OALAX,OAAOO,KAAKwD,GAAa5C,QAAQ,SAAA8C,IAQnC,SAA4BzC,EAAM0C,EAAIC,GACpC,IAAMC,EAAiB9B,EAAMd,GACzB6C,EAAcD,EAAeF,EAAK,IAAME,EAAeF,EAAK,GAC5DI,EAAcF,EAAeF,EAAK,IAAME,EAAeF,EAAK,GAIhE,SAASK,EAA6BJ,EAAeK,GAEnDL,EAAchD,QAAQ,SAAAL,GACjBA,EAAQE,OAASwD,IAClBA,EAAc,KACd1D,EAAQU,KAAO,CAACA,EAAMV,EAAQU,MAAMiD,OAAOC,KAAK,QAIpDF,GAAeL,EAAczC,KAAK,CAAEV,KAAMwD,EAAahD,SAZzD+C,EAA6BJ,EAAeE,GAC5CE,EAA6BJ,EAAeG,GAX1CK,CAAmBV,EADDF,EAAYE,GACUtD,KAGnCA,ECNT,SAASiE,EAASC,EAAO9C,GACvB,IAAM+C,EAAeD,EAAME,MAAMF,EAAME,MAAM9D,OAAS,GACtD6D,EAAa/C,YAAcA,EAC3B+C,EAAaE,YAGf,SAASC,EAAkBJ,EAAO9C,EAAaP,GAC7CqD,EAAMvC,MAAMZ,KAAKF,GACjBqD,EAAME,MAAMrD,KAAK,CACfF,OACAO,cACAiD,UAAW,IAEbH,EAAMK,mBA5DRC,QAAQC,IAAIC,eCHCC,EAAqB,i3BCMbC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAzF,OAAA0F,EAAA,EAAA1F,CAAA2F,KAAAJ,IACjBE,EAAAzF,OAAA4F,EAAA,EAAA5F,CAAA2F,KAAA3F,OAAA6F,EAAA,EAAA7F,CAAAuF,GAAAO,KAAAH,KAAMH,KA0BRO,uBAAyB,SAAAC,GAAG,OAAIP,EAAKQ,UAAYD,GAzB/CP,EAAKS,MAAQ,CACXC,gBAAiB,GACjBC,mBAAoB,IAEtBX,EAAKY,SAAWZ,EAAKY,SAASC,KAAdtG,OAAAuG,EAAA,EAAAvG,QAAAuG,EAAA,EAAAvG,CAAAyF,KAChBA,EAAKe,SAAWf,EAAKe,SAASF,KAAdtG,OAAAuG,EAAA,EAAAvG,QAAAuG,EAAA,EAAAvG,CAAAyF,KAChBA,EAAKgB,QAAUhB,EAAKgB,QAAQH,KAAbtG,OAAAuG,EAAA,EAAAvG,QAAAuG,EAAA,EAAAvG,CAAAyF,KAREA,wEAWViB,GAAG,IAAAC,EACcD,EAAEE,OAAlB5F,EADE2F,EACF3F,KAAM6F,EADJF,EACIE,MACdlB,KAAKmB,SAAL9G,OAAAC,EAAA,EAAAD,CAAA,GAAiBgB,EAAO6F,uCAGf,IAAAE,EACuCpB,KAAKO,MAA7CC,EADCY,EACDZ,gBAAiBC,EADhBW,EACgBX,mBACzBT,KAAKH,MAAMwB,aAAab,EAAiBC,mCAGnCM,GAENA,EAAEO,kBACFtB,KAAKa,4CAKE,IAAAU,EAAAvB,KACP,OACEwB,EAAA1G,EAAA2G,cAACC,EAAD,CAAWZ,QAASd,KAAKH,MAAMiB,SAC7BU,EAAA1G,EAAA2G,cAACE,EAAD,CACEC,MAAM,mBACNvG,KAAK,kBACLqF,SAAUV,KAAKU,SACfQ,MAAOlB,KAAKO,MAAMC,gBAClBqB,UAAW7B,KAAKH,MAAMgC,UACtBC,WAAY,SAAAf,GAAC,MAAc,UAAVA,EAAEgB,KAAmBR,EAAKjB,UAAU0B,WAEvDR,EAAA1G,EAAA2G,cAACE,EAAD,CACEC,MAAM,sBACNvG,KAAK,qBACLqF,SAAUV,KAAKU,SACfQ,MAAOlB,KAAKO,MAAME,mBAClBoB,UAAW7B,KAAKH,MAAMgC,UACtBI,OAAQjC,KAAKI,uBACb0B,WAAY,SAAAf,GAAC,MAAc,UAAVA,EAAEgB,KAAmBR,EAAKV,eAE1Cb,KAAKH,MAAMgC,WACZL,EAAA1G,EAAA2G,cAACS,EAAD,CAAeC,WAAS,EAACrB,QAASd,KAAKc,SAAvC,cAnDgCsB,IAAMC,eA4DhD,SAASV,EAAW9B,GAClB,OACE2B,EAAA1G,EAAA2G,cAACa,EAAD,CAAqBT,UAAWhC,EAAMgC,WACpCL,EAAA1G,EAAA2G,cAACc,EAAD,KACEf,EAAA1G,EAAA2G,cAACe,EAAD,CAAOX,UAAWhC,EAAMgC,WACrBhC,EAAM+B,OAEP/B,EAAMgC,WAAaL,EAAA1G,EAAA2G,cAACgB,EAAD,KAAgB5C,EAAMqB,SAE1CrB,EAAMgC,WACPL,EAAA1G,EAAA2G,cAACiB,EAAD,CACErH,KAAMwE,EAAMxE,KACZ6F,MAAOrB,EAAMqB,MACbR,SAAUb,EAAMa,SAChBiC,YAAaC,EACbd,WAAYjC,EAAMiC,WAClBe,SAAUhD,EAAMoC,UAW1B,IAAMP,EAAYoB,IAAOC,IAAVC,KAKTR,EAAQM,IAAOC,IAAVE,IAGP,SAAApD,GAAK,OAAIA,EAAMgC,WAAa,qBAG1BY,EAAgBK,IAAOI,KAAVC,KAIbZ,EAAiBO,IAAOC,IAAVK,KAMdV,EAAeI,YAAOO,IAAPP,CAAHQ,KAMZhB,EAAsBQ,IAAOC,IAAVQ,IAGL,SAAA1D,GAAK,OAAIA,EAAMgC,UAAY,MAAQ,SAGjDK,EAAgBY,YAAOU,KAAQC,MAAM,CACzCC,QAAS,YACTC,MAAO,WAFab,CAAHc,kkBC3HZ,SAASC,EAATC,GAAsC,IAAXC,EAAWD,EAAjBjI,KAC1B,OAA8B,IAA1BkI,EAAQC,QAAQ,KACXxC,EAAA1G,EAAA2G,cAACwC,EAAD,CAAOpI,KAAMkI,KACgB,IAA3BA,EAAQC,QAAQ,MAClBxC,EAAA1G,EAAA2G,cAACwC,EAAD,CAAOpI,KAAM,OAEbkI,EAAQG,MAAM,KAAKC,IAAI,SAAAC,GAAY,OACxC5C,EAAA1G,EAAA2G,cAACwC,EAAD,CAAOpI,KAAMuI,MAMZ,IAAMC,EAAgBvB,IAAOC,IAAVuB,KAIbL,EAAQnB,IAAOC,IAAIU,MAAM,SAAA5D,GAAK,MAAK,CAC9C0E,SAAU1E,EAAMhE,OADGiH,CAAH0B,IAII,SAAA3E,GAAK,OAoB3B,SAAsBvB,GACpB,OAAOA,GACL,IAAK,KAAM,MAAO,UAClB,IAAK,KACL,IAAK,KAAM,MAAO,UAClB,IAAK,KAAM,MAAO,UAClB,IAAK,KACL,IAAK,KAAM,MAAO,UAClB,IAAK,KAAM,MAAO,UAClB,IAAK,KAAM,MAAO,UASlB,QAAS,MAAO,WAtCWmG,CAAa5E,EAAMhE,OAO9CwI,oXC1BW,SAASK,EAAK7E,GAAO,IAAA8E,EACO9E,EAAM+E,KAAvC/I,EAD0B8I,EAC1B9I,KAAMO,EADoBuI,EACpBvI,YAAaiD,EADOsF,EACPtF,UAC3B,OACEmC,EAAA1G,EAAA2G,cAACoD,GAAD,KACErD,EAAA1G,EAAA2G,cAAC4C,EAAD,KACE7C,EAAA1G,EAAA2G,cAAA,oBACAD,EAAA1G,EAAA2G,cAACqD,GAAD,KAAsBtD,EAAA1G,EAAA2G,cAACoC,EAAD,CAAWhI,KAAMA,KACvC2F,EAAA1G,EAAA2G,cAAA,kBAAAsD,OAAa3I,KAEfoF,EAAA1G,EAAA2G,cAACuD,GAAD,QAAAD,OAAe1F,EAAf,SAAA0F,OAAgC1F,EAAY,EAAI,IAAM,MAK5D,IAAMyF,GAAuBhC,IAAOC,IAAVkC,KAIpBJ,GAAiB/B,YAAOoC,IAAPpC,CAAHqC,KAOdH,GAAYlC,IAAOI,KAAVkC,irBCtBA,SAASC,GAAiBxF,GAAO,IAAAyF,EACCzF,EAAM0F,OAA7C5I,EADsC2I,EACtC3I,MAAO0C,EAD+BiG,EAC/BjG,UAAWE,EADoB+F,EACpB/F,iBACpBiG,EAAY,GAAAT,OAAM1F,EAAN,SAAA0F,OAAuB1F,EAAY,EAAI,IAAM,IACzDoG,EAAiBlG,EAAgB,GAAAwF,OAAMxF,EAAN,iBAAwC,GAC/E,OACEiC,EAAA1G,EAAA2G,cAACiE,GAAD,CAAWC,SAAU9F,EAAM8F,UACzBnE,EAAA1G,EAAA2G,cAACmE,GAAD,CAAQC,QAAM,EAAC/E,QAASjB,EAAMiB,SAC5BU,EAAA1G,EAAA2G,cAACqE,GAAD,KACEtE,EAAA1G,EAAA2G,cAAC4C,EAAD,KACI1H,EAAMwH,IAAI,SAAC7F,EAAUhC,GAAX,OACVkF,EAAA1G,EAAA2G,cAACoC,EAAD,CAAWhI,KAAMyC,EAAUyD,IAAKzF,OAGpCkF,EAAA1G,EAAA2G,cAACsE,GAAD,KACEvE,EAAA1G,EAAA2G,cAAA,WAAM+D,GACNhE,EAAA1G,EAAA2G,cAAA,WAAMgE,KAGT5F,EAAM8F,SAAWnE,EAAA1G,EAAA2G,cAACuE,EAAA,EAAD,MAAiBxE,EAAA1G,EAAA2G,cAACuE,EAAA,EAAD,OAErCxE,EAAA1G,EAAA2G,cAACwE,EAAA,EAAD,CAAUC,GAAIrG,EAAM8F,UAClBnE,EAAA1G,EAAA2G,cAAC0E,GAAD,KACGtG,EAAM0F,OAAOnG,MAAM+E,IAAI,SAACS,EAAMtI,GAAP,OACtBkF,EAAA1G,EAAA2G,cAACiD,EAAD,CAAME,KAAMA,EAAM7C,IAAKzF,SAQnC,IAAMoF,GAAYoB,IAAOC,IAAVqD,KACY,SAAAvG,GAAK,OAAIA,EAAM8F,SAAW,OAAS,eAC1D,SAAA9F,GAAK,OAAIA,EAAM8F,UAAY,+BAGzBG,GAAmBhD,YAAOuD,IAAPvD,CAAHwD,MAQhBH,GAAiBrD,YAAOyD,IAAPzD,CAAH0D,MAQdZ,GAAS9C,YAAOoC,IAAPpC,CAAH2D,MAGNV,GAAejD,IAAOC,IAAV2D,sICxDGC,oLACV,IAAA7G,EAAAE,KACP,OACEwB,EAAA1G,EAAA2G,cAACmF,GAAD,KACEpF,EAAA1G,EAAA2G,cAACwE,EAAA,EAAD,CAAMY,UAAWrF,EAAA1G,EAAA2G,cAACwE,EAAA,EAAD,KLVE,kBKWhBjG,KAAKH,MAAMiH,aAAa3C,IAAI,SAACoB,EAAQjJ,GAAT,OAC3BkF,EAAA1G,EAAA2G,cAAC4D,GAAD,CACEE,OAAQA,EACRI,SAAU7F,EAAKD,MAAMkH,gBAAkBzK,EACvCwE,QAAS,kBAAMhB,EAAKD,MAAMmH,kBAAkB1K,IAC5CyF,IAAKzF,eAVwB8F,IAAM6E,WAuB3CvF,GAAYoB,IAAOC,IAAVmE,0LCxBMC,eACnB,SAAAA,EAAYtH,GAAO,IAAAC,EAAA,OAAAzF,OAAA0F,EAAA,EAAA1F,CAAA2F,KAAAmH,IACjBrH,EAAAzF,OAAA4F,EAAA,EAAA5F,CAAA2F,KAAA3F,OAAA6F,EAAA,EAAA7F,CAAA8M,GAAAhH,KAAAH,KAAMH,KACDU,MAAQ,CACXuG,aAAc,GACdM,kBAAkB,EAClBL,cAAe,GAEjBjH,EAAKuH,SAAWvH,EAAKuH,SAAS1G,KAAdtG,OAAAuG,EAAA,EAAAvG,QAAAuG,EAAA,EAAAvG,CAAAyF,KAChBA,EAAKwH,cAAgBxH,EAAKwH,cAAc3G,KAAnBtG,OAAAuG,EAAA,EAAAvG,QAAAuG,EAAA,EAAAvG,CAAAyF,KACrBA,EAAKkH,kBAAoBlH,EAAKkH,kBAAkBrG,KAAvBtG,OAAAuG,EAAA,EAAAvG,QAAAuG,EAAA,EAAAvG,CAAAyF,KATRA,wEAYVyH,EAAOC,GACd,IAAMV,EPhBK,SAA2BtG,EAAiBC,GAEzD,IAAMgH,EAAQzN,EAAS0F,EAAYc,EAAiBC,GAEpD,OADAjB,QAAQC,IAAI,eAAgBiI,KAAKC,MAAMD,KAAKE,UAAUH,KAC/CA,EAAMtD,IAAK,SAAA0D,GAQhB,IAPA,IAAM3I,EAAQ,CACZvC,MAAO,GACP0C,UAAWwI,EAAKvM,OAChBiE,kBAAmB,EACnBH,MAAO,IAEL0I,EAAe,GACbD,EAAKvM,QAAQ,KAAAyM,EACWF,EAAKG,MAA3B5L,EADW2L,EACX3L,YAAaP,EADFkM,EACElM,KAEfA,IAASiM,EACPjM,EAAKmI,QAAQ,KAAO,GAAK8D,EAAa9D,QAAQ,KAAO,EAAG,WAC1D,IAAMiE,EAAsBpM,EAAKqI,MAAM,KACjCgE,EAAuBJ,EAAa5D,MAAM,KAE1CiE,EAAaF,EAChB/M,OAAO,SAAAW,GAAI,OAAK,IAAMqM,EAAqBlE,QAAQnI,KAClDsM,EAAW7M,QACb2D,EAASC,EAAO9C,GAGhB8C,EAAMvC,MAAMuC,EAAMvC,MAAMrB,OAAQ,GAAK6M,EAAW,GAChDjJ,EAAME,MAAMF,EAAME,MAAM9D,OAAS,GAAGO,KAAOsM,EAAW,GACtDL,EAAeK,EAAW,KAE1B7I,EAAkBJ,EAAO9C,EAAaP,GACtCiM,EAAejM,GAfyC,IAkB1DyD,EAAkBJ,EAAO9C,EAAaP,GACtCiM,EAAejM,GAGjBoD,EAASC,EAAO9C,GAGpB,OAAO8C,IOzBckJ,CAAkBb,EAAOC,GAC9CxH,KAAKmB,SAAS,CAAE2F,eAAcC,cAAe,IAC7C/G,KAAKsH,wDAILtH,KAAKmB,SAAS,CAAEiG,kBAAkB,8CAGlBiB,GACZrI,KAAKO,MAAMwG,gBAAkBsB,EAC/BrI,KAAKmB,SAAS,CAAE4F,cAAe,OAE/B/G,KAAKmB,SAAS,CAAE4F,cAAesB,IAEjCrI,KAAKsH,iDAGE,IAAA/F,EAAAvB,KAAAoB,EACoCpB,KAAKO,MAAxCuG,EADD1F,EACC0F,aAAcM,EADfhG,EACegG,iBAChBkB,EAAaxB,EAAaxL,OAAS,EACzC,OACEkG,EAAA1G,EAAA2G,cAAC8G,GAAD,KACE/G,EAAA1G,EAAA2G,cAAC+G,EAAD,CACE3G,UAAWuF,EACX/F,aAAcrB,KAAKqH,SACnBvG,QAAS,kBAAMS,EAAKJ,SAAS,CAAEiG,kBAAkB,OAEjDkB,GACA9G,EAAA1G,EAAA2G,cAACgH,GAAD,CACE3B,aAAcA,EACdQ,cAAetH,KAAKsH,cACpBN,kBAAmBhH,KAAKgH,kBACxBD,cAAe/G,KAAKO,MAAMwG,wBA/CLE,aAuD3BsB,GAAOzF,IAAOC,IAAV2F,MCjDUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzH,EAAA1G,EAAA2G,cAACyH,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a197430d.chunk.js","sourcesContent":["export default function dijkstra(graph, startNode, endNode) {\n  const distances = { [startNode]: 0 };\n  const prevs = {};\n  let destinationReached = false;\n  let shortestDistance = 999; // For testing purpose\n  do {\n    // TODO: instead of relying on lowest distance,\n    // we can just iterate all the neighbor we have from source node\n    // and then change distances const to be a list of visited nodes (?)\n    const currentNodeName = findLowestDistanceNode(distances);\n    if(currentNodeName === endNode) {\n      // TODO make threshold to allow searching for less efficient routes\n      // e.g. ~3 stops\n      destinationReached = true;\n      shortestDistance = distances[currentNodeName]; // For testing purpose\n    }\n    findNeighborNodes(graph, currentNodeName, prevs).forEach(neighbor => {\n      // If you're from Chinatown , you can take either NE-EW or DT-CC to Paya Lebar\n      // then Paya Lebar should store 2 (or more) prevs\n      if (prevs[neighbor.name] === undefined) prevs[neighbor.name] = [];\n      const neighborsPreviousStations = prevs[neighbor.name];\n      const newNeighborsPreviousStation = { name: currentNodeName, line: neighbor.line };\n      const neighborDistance = distances[currentNodeName] + 1;\n      distances[neighbor.name] = neighborDistance; // TODO: later we wont need distance\n      neighborsPreviousStations.push(newNeighborsPreviousStation);\n    });\n    delete distances[currentNodeName]; // dont do this if we want to have some less efficient routes\n  } while(!destinationReached && Object.keys(prevs).length < 200);\n  if (!destinationReached) throw 'Destination not reached'; // For testing\n  const builtRoutes = [];\n  const initialPath = [];\n  builtRoutes.push(initialPath);\n  tracePath(prevs, endNode, builtRoutes, initialPath);\n  // if (shortestDistance !== path.length) throw `the result is different from path : Expected ${shortestDistance}. Path: ${path}`; // For testing\n  return builtRoutes;\n}\n\nfunction tracePath(listOfAllPrevNodes, destination, builtRoutes, builtPath) {\n  const prevs = listOfAllPrevNodes[destination];\n  // if there's no prev left, end the loop;\n  if(!prevs) return;\n  // make a new path for each prev except #1 prev\n  for(let i = 1; i < prevs.length; i++) { // iterate from index = 1\n    const newPath = [...builtPath];\n    const { name, line } = prevs[i];\n    newPath.push({ destination, line });\n    builtRoutes.push(newPath);\n    tracePath(listOfAllPrevNodes, name, builtRoutes, newPath);\n  }\n  // push 1st prev last, to avoid affecting the remaining path\n  const { name, line } = prevs[0];\n  builtPath.push({ destination, line });\n  tracePath(listOfAllPrevNodes, name, builtRoutes, builtPath);\n}\n\nfunction findLowestDistanceNode(nodeDistances) {\n  return Object\n    .keys(nodeDistances)\n    .reduce((a, b) => nodeDistances[a] < nodeDistances[b] ? a : b);\n}\n\nfunction findNeighborNodes(graph, currentNodeName, prevs) {\n  const { adjacent } = graph[currentNodeName];\n  // return all neighbor, but dont go back to prev node\n  const previousNodes = prevs[currentNodeName] || [];\n  return adjacent.filter(station => // can't use Array.prototype.includes :(\n    previousNodes.filter(prev => prev.name === station.name).length === 0\n    // previousNodes.reduce((result, prev) => result && prev.name !== station.name, true)\n  );\n}\n","import stations from '../../data/stations.json';\n\nconst lines = {\n  EW: [],\n  NS: [],\n  NE: [],\n  DT: [],\n  CC: [],\n  CE: [],\n  CG: [],\n  TE: [],\n  JS: [],\n  JW: [],\n  JE: [],\n  SE: [],\n  SW: [],\n  PE: [],\n  PW: [],\n  BP: [],\n};\n\nconst stationNames = Object.keys(stations);\n\n// assign every station to their lines\nstationNames.forEach(name => {\n  Object.keys(stations[name]).forEach(line => {\n    const stationLine = lines[line];\n    let stationNumber = stations[name][line];\n    if (Array.isArray(stationNumber)) {\n      stationNumber.forEach(number => {\n        stationLine[number] = name;\n      });\n    } else {\n      stationLine[stationNumber] = name;\n    }\n  });\n});\n\nconst stationWithAdjacent = {};\nstationNames.forEach(name => {\n  const stationCode = stations[name];\n  stationWithAdjacent[name] = {\n    line: Object.keys(stationCode),\n    adjacent: findAdjacent(stationCode),\n  };\n});\n\nexport default stationWithAdjacent;\n\nfunction findAdjacent(stationCode) {\n  const adjacent = [];\n  Object.keys(stationCode).forEach(lineCode => {\n    const stationNo = stationCode[lineCode];\n    findAdjacentInLine(lineCode, stationNo, adjacent);\n  });\n  // adjacent.push(...findSpecialAdjacent(stationCode));\n  return adjacent;\n}\n\nfunction findAdjacentInLine(line, no, builtAdjacent) {\n  const stationsinLine = lines[line];\n  let prevStation = stationsinLine[no - 1] || stationsinLine[no - 2];\n  let nextStation = stationsinLine[no + 1] || stationsinLine[no + 2];\n  checkDupicateAndPushAdjacent(builtAdjacent, prevStation);\n  checkDupicateAndPushAdjacent(builtAdjacent, nextStation);\n\n  function checkDupicateAndPushAdjacent(builtAdjacent, newAdjacent) {\n    // before push, check whether we already have this adjacent o'not\n    builtAdjacent.forEach(station => {\n      if(station.name === newAdjacent) {\n        newAdjacent = null;\n        station.line = [line, station.line].sort().join('/');\n        // make the multiple station.line = 'CC/CE', not 'CE/CC'\n      }\n    });\n    newAdjacent && builtAdjacent.push({ name: newAdjacent, line });\n    // if there's no adjacent node, it won't push anything\n  }\n}\n\n// function findSpecialAdjacent() {\n//   // TODO: special adjacent, for example:\n//   // 'Gek Poh' JW1 is adjacent with 'Bahar Junction' JS7\n//   // please see Jurong Area MRT\n//   return [];\n// }\n","import dijkstra from './dijkstra';\nimport stationMap from './initializeData';\n\nconsole.log(stationMap)\nexport default function findShortestRoute(startingStation, destinationStation) {\n  // currently can't connect all MRT line to Jurong lines and all LRTs\n  const paths = dijkstra(stationMap, startingStation, destinationStation);\n  console.log('result paths', JSON.parse(JSON.stringify(paths)));\n  return paths.map( path => {\n    const route = {\n      lines: [],\n      stopCount: path.length,\n      interchangeCount: -1,\n      steps: [],\n    };\n    let previousLine = '';\n    while(path.length) {\n      let { destination, line } = path.pop();\n      // somehow i feel we can simplify this nested conditions but just havn't find it\n      if (line !== previousLine) {\n        if (line.indexOf('/') > 1 || previousLine.indexOf('/') > 1) {\n          const splittedCurrentLine = line.split('/');\n          const splittedPreviousLine = previousLine.split('/');\n          // find intersection between 2 arrays\n          const intersects = splittedCurrentLine\n            .filter(line => -1 !== splittedPreviousLine.indexOf(line));\n          if (intersects.length) { // still in the same line, no need to interchange\n            addSteps(route, destination);\n            // it works for current MRT line,\n            // unless if there's another wierd overlapping lines in the future\n            route.lines[route.lines.length -1] = intersects[0];\n            route.steps[route.steps.length - 1].line = intersects[0];\n            previousLine = intersects[0];\n          } else {\n            addNewInterchange(route, destination, line);\n            previousLine = line;\n          }\n        } else {\n          addNewInterchange(route, destination, line);\n          previousLine = line;\n        }\n      } else {\n        addSteps(route, destination);\n      }\n    }\n    return route;\n    // TODO: sort based on best route\n  });\n}\n\nfunction addSteps(route, destination) {\n  const currentSteps = route.steps[route.steps.length - 1];\n  currentSteps.destination = destination;\n  currentSteps.stopCount++;\n}\n\nfunction addNewInterchange(route, destination, line) {\n  route.lines.push(line);\n  route.steps.push({\n    line,\n    destination,\n    stopCount: 1,\n  });\n  route.interchangeCount++;\n}\n","export const SEARCH_PLACEHOLDER = 'Search for station, e.g: Rochor';\nexport const LIST_HEADER = 'Route options';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Input, Button } from '@material-ui/core';\nimport * as Text from '../constants/uiTexts';\n\nexport default class InputSection extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startingStation: '',\n      destinationStation: '',\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onChange(e) {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n  \n  onSubmit() {\n    const { startingStation, destinationStation } = this.state;\n    this.props.submitAction(startingStation, destinationStation);\n  }\n\n  onClick(e) {\n    // don't fire onClick at Container to keep input field closed\n    e.stopPropagation();\n    this.onSubmit();\n  }\n\n  setDestinationInputRef = ref => this.destInput = ref;\n\n  render() {\n    return (\n      <Container onClick={this.props.onClick}>\n        <InputField\n          label=\"Starting station\"\n          name=\"startingStation\"\n          onChange={this.onChange}\n          value={this.state.startingStation}\n          collapsed={this.props.collapsed}\n          onKeyPress={e => e.key === 'Enter' && this.destInput.focus()}\n        />\n        <InputField\n          label=\"Destination station\"\n          name=\"destinationStation\"\n          onChange={this.onChange}\n          value={this.state.destinationStation}\n          collapsed={this.props.collapsed}\n          setRef={this.setDestinationInputRef}\n          onKeyPress={e => e.key === 'Enter' && this.onSubmit()}\n        />\n        { !this.props.collapsed &&\n          <PrimaryButton fullWidth onClick={this.onClick}>\n            Go\n          </PrimaryButton>\n        }\n      </Container>\n    );\n  }\n}\n\nfunction InputField(props) {\n  return(\n    <InputFieldContainer collapsed={props.collapsed}>\n      <InputFieldText>\n        <Label collapsed={props.collapsed}>\n          {props.label}\n        </Label>\n        { props.collapsed && <ReadOnlyValue>{props.value}</ReadOnlyValue> }\n      </InputFieldText>\n      { !props.collapsed &&\n        <StationInput\n          name={props.name}\n          value={props.value}\n          onChange={props.onChange}\n          placeholder={Text.SEARCH_PLACEHOLDER}\n          onKeyPress={props.onKeyPress}\n          inputRef={props.setRef}\n        />\n      }\n    </InputFieldContainer>\n  );\n}\nInputSection.propTypes = {\n  submitAction: PropTypes.func.isRequired,\n  collapsed: PropTypes.bool,\n}\n\nconst Container = styled.div`\n  background-color: lightblue;\n  padding: 32px 16px;\n`;\n\nconst Label = styled.div`\n  text-align: left;\n  font-weight: bold;\n  ${props => props.collapsed && 'font-size: 13px;'}\n`;\n\nconst ReadOnlyValue = styled.span`\n  font-size: 14px;\n`;\n\nconst InputFieldText = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin: 8px 0;\n`;\n\nconst StationInput = styled(Input)`\n  width: calc(100% - 16px);\n  border: solid gray .2px;\n  padding: 8px;\n`;\n\nconst InputFieldContainer = styled.div`\n  width: 70vw;\n  margin: 0 auto;\n  padding-bottom: ${props => props.collapsed ? '8px' : '32px'};\n`;\n\nconst PrimaryButton = styled(Button).attrs({\n  variant: 'contained',\n  color: 'primary',\n})`\n  height: 48px;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport function LineBadge({ line: rawLine }) {\n  if (rawLine.indexOf('/') === -1) {\n    return <Badge line={rawLine} />;\n  } else if (rawLine.indexOf('CC') !== -1) {\n    return <Badge line={'CC'} />;\n  } else {\n    return rawLine.split('/').map(optionalLine =>\n      <Badge line={optionalLine} />\n    );\n  }\n}\n\n\nexport const LineContainer = styled.div`\n  display: flex;\n`;\n\nexport const Badge = styled.div.attrs(props => ({\n  children: props.line,\n}))`\n  color: #fff;\n  background-color: ${props => getLineColor(props.line)};\n  font-size: 12px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 24px;\n  padding: 2px 4px;\n  ${LineContainer} > & {\n    height: 18px;\n    &:first-child {\n      border-top-left-radius: 4px;\n      border-bottom-left-radius: 4px;\n    }\n    &:last-child {\n      border-top-right-radius: 4px;\n      border-bottom-right-radius: 4px;\n    }\n  }\n`;\n\nfunction getLineColor(lineCode) {\n  switch(lineCode) {\n    case 'NS': return '#d62821';\n    case 'EW': return '#189e4a';\n    case 'CG': return '#189e4a';\n    case 'NE': return '#844184';\n    case 'CC': return '#f2ad27';\n    case 'CE': return '#f2ad27';\n    case 'DT': return '#0354a6';\n    case 'TE': return '#784008';\n    // case 'JS': return '#a8a8a8';\n    // case 'JW': return '#a8a8a8';\n    // case 'JE': return '#a8a8a8';\n    // case 'BP': return '#a8a8a8';\n    // case 'SW': return '#a8a8a8';\n    // case 'SE': return '#a8a8a8';\n    // case 'PW': return '#a8a8a8';\n    // case 'PE': return '#a8a8a8';\n    default: return '#a8a8a8';\n  }\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { ListItem, ListItemText } from '@material-ui/core';\nimport { LineBadge, LineContainer } from './LineBadge';\n\nexport default function Step(props) {\n  const { line, destination, stopCount } = props.step;\n  return (\n    <StyledListItem>\n      <LineContainer>\n        <div>Take </div>\n        <InlineBadgeContainer><LineBadge line={line} /></InlineBadgeContainer>\n        <div>{` to ${destination}`}</div>\n      </LineContainer>\n      <StopCount>{`${stopCount} stop${stopCount > 1 ? 's' : ''}`}</StopCount>\n    </StyledListItem>\n  );\n}\n\nconst InlineBadgeContainer = styled.div`\n  display: flex;\n  margin: 0 4px;\n`;\nconst StyledListItem = styled(ListItem)`\n  && {\n    justify-content: space-between;\n    font-size: 14px;\n  }\n`;\n\nconst StopCount = styled.span`\n  font-size: 12px;\n  color: #555;\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { LineBadge, LineContainer } from './LineBadge';\nimport { Collapse, List, ListItem, ListItemText } from '@material-ui/core';\nimport { ExpandLess, ExpandMore } from '@material-ui/icons';\nimport Step from './Step';\n\nexport default function OptionExpandable(props) {\n  const { lines, stopCount, interchangeCount } = props.option;\n  const stopOverview = `${stopCount} stop${stopCount > 1 ? 's' : ''}`;\n  const changeOverview = interchangeCount ? `${interchangeCount} interchanges` : '';\n  return (\n    <Container expanded={props.expanded}>\n      <Option button onClick={props.onClick}>\n        <ExpendableHeader>\n          <LineContainer>\n            { lines.map((lineCode, i) =>\n              <LineBadge line={lineCode} key={i} />\n            )}\n          </LineContainer>\n          <StopOverview>\n            <div>{stopOverview}</div>\n            <div>{changeOverview}</div>\n          </StopOverview>\n        </ExpendableHeader>\n        {props.expanded ? <ExpandLess /> : <ExpandMore />}\n      </Option>\n      <Collapse in={props.expanded}>\n        <StepsContainer>\n          {props.option.steps.map((step, i) =>\n            <Step step={step} key={i} />\n          )}\n        </StepsContainer>\n      </Collapse>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  border-left: 4px solid ${props => props.expanded ? '#ccc' : 'transparent'};\n  ${props => props.expanded && 'background-color: #f1f1f1;'}\n`;\n\nconst ExpendableHeader = styled(ListItemText)`\n  & > span {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n`;\n\nconst StepsContainer = styled(List)`\n  && {\n    border-top: 1px solid #c8c8c8;\n    margin-left: 16px;\n    padding-bottom: 32px;\n  }\n`;\n\nconst Option = styled(ListItem)`\n`;\n\nconst StopOverview = styled.div`\n  font-size: 12px;\n  line-height: 1em;\n  color: #555;\n  text-align: right;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { List, ListSubheader } from '@material-ui/core';\nimport OptionExpandable from './OptionExpandable';\nimport * as Text from '../../constants/uiTexts';\n\nexport default class RoutesSection extends React.Component {\n  render() {\n    return (\n      <Container>\n        <List subheader={<ListSubheader>{Text.LIST_HEADER}</ListSubheader>}>\n          {this.props.routeOptions.map((option, i) =>\n            <OptionExpandable\n              option={option}\n              expanded={this.props.expandedIndex === i}\n              onClick={() => this.props.onClickExpandable(i)}\n              key={i}\n            />\n          )}\n        </List>\n      </Container>\n    );\n  }\n}\n\nRoutesSection.propTypes = {\n  routeOptions: PropTypes.array.isRequired,\n}\n\nconst Container = styled.div`\n  // background-color: #fafafa;\n  padding: 16px;\n`;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport findShortestRoute from './modules/shortestPathLogics';\nimport InputSection from './modules/InputSection';\nimport RoutesSection from './modules/RoutesSection';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      routeOptions: [],\n      isInputCollapsed: false,\n      expandedIndex: 0,\n    };\n    this.onSearch = this.onSearch.bind(this);\n    this.collapseInput = this.collapseInput.bind(this);\n    this.onClickExpandable = this.onClickExpandable.bind(this);\n  }\n\n  onSearch(start, end) {\n    const routeOptions = findShortestRoute(start, end);\n    this.setState({ routeOptions, expandedIndex: 0 });\n    this.collapseInput();\n  }\n\n  collapseInput() {\n    this.setState({ isInputCollapsed: true });\n  }\n\n  onClickExpandable(index) {\n    if (this.state.expandedIndex === index) {\n      this.setState({ expandedIndex: null });\n    } else {\n      this.setState({ expandedIndex: index });\n    }\n    this.collapseInput();\n  }\n\n  render() {\n    const { routeOptions, isInputCollapsed } = this.state;\n    const hasResult = (routeOptions.length > 0);\n    return (\n      <Home>\n        <InputSection\n          collapsed={isInputCollapsed}\n          submitAction={this.onSearch}\n          onClick={() => this.setState({ isInputCollapsed: false })}\n        />\n        { hasResult &&\n          <RoutesSection\n            routeOptions={routeOptions}\n            collapseInput={this.collapseInput}\n            onClickExpandable={this.onClickExpandable}\n            expandedIndex={this.state.expandedIndex}\n          />\n        }\n      </Home>\n    );\n  }\n}\n\nconst Home = styled.div`\n  // display: flex;\n  // height: 100vh;\n  // flex-direction: column;\n  // justify-content: center;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}