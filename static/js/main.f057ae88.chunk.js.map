{"version":3,"sources":["modules/shortestPathLogics/dijkstra.js","modules/shortestPathLogics/initializeData.js","constants/heuristicValue.js","modules/shortestPathLogics/index.js","constants/uiTexts.js","modules/InputSection/InputField.style.js","modules/InputSection/InputField.js","modules/InputSection/InputSection.style.js","modules/InputSection/index.js","modules/InputSection/InputSection.js","components/LineBadge/LineBadge.style.js","components/LineBadge/LineBadge.js","modules/RoutesSection/Step.style.js","modules/RoutesSection/Step.js","modules/RoutesSection/OptionExpandable.style.js","modules/RoutesSection/OptionExpandable.js","modules/RoutesSection/index.js","App.js","serviceWorker.js","index.js"],"names":["dijkstra","graph","startNode","endNode","distances","Object","defineProperty","prevs","destinationReached","_loop","nodeDistances","currentNodeName","keys","reduce","a","b","adjacent","previousNodes","filter","station","prev","name","length","findNeighborNodes","forEach","neighbor","undefined","neighborsPreviousStations","newNeighborsPreviousStation","line","neighborDistance","push","builtRoutes","initialPath","tracePath","listOfAllPrevNodes","destination","builtPath","i","newPath","toConsumableArray","_prevs$i","_prevs$","lines","EW","NS","NE","DT","CC","CE","CG","TE","JS","JW","JE","SE","SW","PE","PW","BP","stationNames","stations","stationLine","stationNumber","Array","isArray","number","stationWithAdjacent","stationCode","findAdjacent","lineCode","stationNo","no","findAdjacentInLine","builtAdjacent","findSpecialAdjacent","stationsinLine","prevStation","nextStation","checkDupicateAndPushAdjacent","newAdjacent","sort","join","Weight","STOP","INTERCHANGE","addSteps","route","currentSteps","steps","stopCount","addNewInterchange","interchangeCount","SEARCH_PLACEHOLDER","Label","styled","div","_templateObject","ReadOnlyValue","span","_templateObject2","InputFieldText","_templateObject3","InputFieldContainer","_templateObject4","props","collapsed","StyledSelect","Select","_templateObject5","error","InputField","options","map","value","label","defaultValue","indexOf","react_default","createElement","onChange","placeholder","Text","onKeyPress","inputRef","setRef","Container","InputSection_style_templateObject","Header","h4","InputSection_style_templateObject2","PrimaryButton","Button","attrs","variant","InputSection_style_templateObject3","InputSection","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setDestinationInputRef","ref","destInput","state","startingStation","destinationStation","bind","assertThisInitialized","onSubmit","onClick","selectedItem","componentProps","_this$setState","inputName","setState","_this$state","submitAction","e","stopPropagation","_this2","key","focus","fullWidth","React","PureComponent","LineContainer","LineBadge_style_templateObject","Badge","children","LineBadge_style_templateObject2","getLineColor","LineBadge","_ref","rawLine","split","optionalLine","InlineBadgeContainer","Step_style_templateObject","StyledListItem","ListItem","Step_style_templateObject2","StopCount","Step_style_templateObject3","Step","_props$step","step","concat","OptionExpandable_style_templateObject","expanded","ExpandableHeader","ListItemText","OptionExpandable_style_templateObject2","StepsContainer","List","OptionExpandable_style_templateObject3","Option","OptionExpandable_style_templateObject4","LineOverview","OptionExpandable_style_templateObject5","StopOverview","_templateObject6","OptionExpandable","_props$option","option","stopOverview","changeOverview","OptionExpandable_style_Container","button","Fragment","icons_index_es","index_es","in","RoutesSection","RoutesSection_Container","StyledList","StyledListSubheader","routeOptions","expandedIndex","onClickExpandable","Component","RoutesSection_templateObject","RoutesSection_templateObject2","ListSubheader","RoutesSection_templateObject3","App","isInputCollapsed","onSearch","collapseInput","start","end","stationMap","path","heuristicValue","previousLine","_path$pop","pop","splittedCurrentLine","splittedPreviousLine","intersects","index","hasResult","Home","modules_InputSection","RoutesSection_RoutesSection","App_templateObject","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f057ae88.chunk.js","sourcesContent":["export default function dijkstra(graph, startNode, endNode) {\n  const distances = { [startNode]: 0 };\n  const prevs = {};\n  let destinationReached = false;\n  do {\n    // TODO: instead of relying on lowest distance,\n    // we can just iterate all the neighbor we have from source node\n    // and then change distances const to be a list of visited nodes (?)\n    const currentNodeName = findLowestDistanceNode(distances);\n    if(currentNodeName === endNode) {\n      // TODO make threshold to allow searching for less efficient routes\n      // e.g. ~3 stops\n      destinationReached = true;\n    }\n    findNeighborNodes(graph, currentNodeName, prevs).forEach(neighbor => {\n      // If you're from Chinatown , you can take either NE-EW or DT-CC to Paya Lebar\n      // then Paya Lebar should store 2 (or more) prevs\n      if (prevs[neighbor.name] === undefined) prevs[neighbor.name] = [];\n      const neighborsPreviousStations = prevs[neighbor.name];\n      const newNeighborsPreviousStation = { name: currentNodeName, line: neighbor.line };\n      const neighborDistance = distances[currentNodeName] + 1;\n      distances[neighbor.name] = neighborDistance; // TODO: later we wont need distance\n      neighborsPreviousStations.push(newNeighborsPreviousStation);\n    });\n    delete distances[currentNodeName]; // dont do this if we want to have some less efficient routes\n  } while(!destinationReached && Object.keys(prevs).length < 200); // avoid infinite-loop\n  const builtRoutes = [];\n  const initialPath = [];\n  builtRoutes.push(initialPath);\n  tracePath(prevs, endNode, builtRoutes, initialPath);\n  return builtRoutes;\n}\n\nfunction tracePath(listOfAllPrevNodes, destination, builtRoutes, builtPath) {\n  const prevs = listOfAllPrevNodes[destination];\n  // if there's no prev left, end the loop;\n  if(!prevs) return;\n  // make a new path for each prev except #1 prev\n  for(let i = 1; i < prevs.length; i++) { // iterate from index = 1\n    const newPath = [...builtPath];\n    const { name, line } = prevs[i];\n    newPath.push({ destination, line });\n    builtRoutes.push(newPath);\n    tracePath(listOfAllPrevNodes, name, builtRoutes, newPath);\n  }\n  // push 1st prev last, to avoid affecting the remaining path\n  const { name, line } = prevs[0];\n  builtPath.push({ destination, line });\n  tracePath(listOfAllPrevNodes, name, builtRoutes, builtPath);\n}\n\nfunction findLowestDistanceNode(nodeDistances) {\n  return Object\n    .keys(nodeDistances)\n    .reduce((a, b) => nodeDistances[a] < nodeDistances[b] ? a : b);\n}\n\nfunction findNeighborNodes(graph, currentNodeName, prevs) {\n  const { adjacent } = graph[currentNodeName];\n  // return all neighbor, but dont go back to prev node\n  const previousNodes = prevs[currentNodeName] || [];\n  return adjacent.filter(station => // can't use Array.prototype.includes :(\n    previousNodes.filter(prev => prev.name === station.name).length === 0\n    // previousNodes.reduce((result, prev) => result && prev.name !== station.name, true)\n  );\n}\n","import stations from '../../data/stations.json';\n\nconst lines = {\n  EW: [],\n  NS: [],\n  NE: [],\n  DT: [],\n  CC: [],\n  CE: [],\n  CG: [],\n  TE: [],\n  JS: [],\n  JW: [],\n  JE: [],\n  SE: [],\n  SW: [],\n  PE: [],\n  PW: [],\n  BP: [],\n};\n\nexport const stationNames = Object.keys(stations);\n\n// assign every station to their lines\nstationNames.forEach(name => {\n  Object.keys(stations[name]).forEach(line => {\n    const stationLine = lines[line];\n    let stationNumber = stations[name][line];\n    if (Array.isArray(stationNumber)) {\n      stationNumber.forEach(number => {\n        stationLine[number] = name;\n      });\n    } else {\n      stationLine[stationNumber] = name;\n    }\n  });\n});\n\nconst stationWithAdjacent = {};\nstationNames.forEach(name => {\n  const stationCode = stations[name];\n  stationWithAdjacent[name] = {\n    line: Object.keys(stationCode),\n    adjacent: findAdjacent(stationCode),\n  };\n});\n\nexport default stationWithAdjacent;\n\nfunction findAdjacent(stationCode) {\n  const adjacent = [];\n  Object.keys(stationCode).forEach(lineCode => {\n    const stationNo = stationCode[lineCode];\n    // note that 'stationNo' params could be an array, e.g. { BP: [1, 14] }\n    if (Array.isArray(stationNo)) {\n      stationNo.forEach(no => findAdjacentInLine(lineCode, no, adjacent));\n    } else {\n      findAdjacentInLine(lineCode, stationNo, adjacent);\n    }\n  });\n  findSpecialAdjacent(stationCode, adjacent);\n  return adjacent;\n}\n\nfunction findAdjacentInLine(line, no, builtAdjacent) {\n  const stationsinLine = lines[line];\n  let prevStation = stationsinLine[no - 1] || stationsinLine[no - 2];\n  let nextStation = stationsinLine[no + 1] || stationsinLine[no + 2];\n  checkDupicateAndPushAdjacent(builtAdjacent, prevStation);\n  checkDupicateAndPushAdjacent(builtAdjacent, nextStation);\n\n  function checkDupicateAndPushAdjacent(builtAdjacent, newAdjacent) {\n    // before push, check whether we already have this adjacent o'not\n    builtAdjacent.forEach(station => {\n      if(station.name === newAdjacent) {\n        newAdjacent = null;\n        station.line = [line, station.line].sort().join('/');\n        // make the multiple station.line = 'CC/CE', not 'CE/CC'\n      }\n    });\n    newAdjacent && builtAdjacent.push({ name: newAdjacent, line });\n    // if there's no adjacent node, it won't push anything\n  }\n}\n\nfunction findSpecialAdjacent(stationCode, builtAdjacent) {\n  // 'Gek Poh' JW1 is adjacent with 'Bahar Junction' JS7\n  // these adjacent can't be done by logic and must be implemented hardcodedly\n  // please see Jurong Area MRT\n  if (stationCode.JS === 7) builtAdjacent.push({ line: 'JW', name: 'Gek Poh'});\n  if (stationCode.JS === 3) builtAdjacent.push({ line: 'JE', name: 'Tengah Plantation' });\n  if (stationCode.JE === 1) builtAdjacent.push({ line: 'JE', name: 'Tengah' });\n  if (stationCode.JW === 1) builtAdjacent.push({ line: 'JW', name: 'Bahar Junction' });\n}\n","export const Weight = {\n  STOP: 1,\n  INTERCHANGE: 1.6,\n}\n","import dijkstra from './dijkstra';\nimport stationMap from './initializeData';\nimport { Weight } from '../../constants/heuristicValue';\n\nexport default function findShortestRoute(startingStation, destinationStation) {\n  const paths = dijkstra(stationMap, startingStation, destinationStation);\n  /**\n   * paths is an array of possible routes\n   * routes is an array of stations forming a path\n   * station is an object contains destination and which line we should take\n   * paths: [\n      0: [\n        0: { destination: \"Khatib\", line: \"NS\" },\n        1: { destination: \"Yishun\", line: \"NS\" },\n        2: { destination: \"Canberra\", line: \"NS\" },\n      ],\n      1: [ ...etc ],\n    ]\n   **/\n  const restructuredPaths = paths.map( path => {\n    const route = {\n      lines: [],\n      stopCount: path.length,\n      interchangeCount: -1,\n      steps: [],\n      heuristicValue: 0,\n    };\n    let previousLine = '';\n    while(path.length) {\n      let { destination, line } = path.pop();\n      // somehow i feel we can simplify this nested conditions but just havn't find it\n      if (line !== previousLine) {\n        if (line.indexOf('/') > 1 || previousLine.indexOf('/') > 1) {\n          const splittedCurrentLine = line.split('/');\n          const splittedPreviousLine = previousLine.split('/');\n          // find intersection between 2 arrays\n          const intersects = splittedCurrentLine\n            .filter(line => -1 !== splittedPreviousLine.indexOf(line));\n          if (intersects.length) { // still in the same line, no need to interchange\n            addSteps(route, destination);\n            // update the recorded lines to match only 1 line\n            route.lines[route.lines.length -1] = intersects[0];\n            route.steps[route.steps.length - 1].line = intersects[0];\n            previousLine = intersects[0];\n          } else {\n            addNewInterchange(route, destination, line);\n            previousLine = line;\n          }\n        } else {\n          addNewInterchange(route, destination, line);\n          previousLine = line;\n        }\n      } else {\n        addSteps(route, destination);\n      }\n    }\n    // count overall heuristicValue based on weights in heuristicValue.js\n    route.heuristicValue = route.stopCount * Weight.STOP\n      + route.interchangeCount * Weight.INTERCHANGE;\n    return route;\n  });\n  // sort by heuristicValue\n  return restructuredPaths.sort((a, b) => a.heuristicValue - b.heuristicValue);\n}\n\nfunction addSteps(route, destination) {\n  const currentSteps = route.steps[route.steps.length - 1];\n  currentSteps.destination = destination;\n  currentSteps.stopCount++;\n}\n\nfunction addNewInterchange(route, destination, line) {\n  route.lines.push(line);\n  route.steps.push({\n    line,\n    destination,\n    stopCount: 1,\n  });\n  route.interchangeCount++;\n}\n","export const HEADER = 'Search for MRT routes';\nexport const SEARCH_PLACEHOLDER = 'e.g: Raffles Place';\nexport const LIST_HEADER = 'Route options';\n","import styled from 'styled-components';\nimport Select from 'react-select';\n\nexport const Label = styled.div`\n  font-size: 13px;\n  font-weight: bold;\n  text-align: left;\n`;\n\nexport const ReadOnlyValue = styled.span`\n  font-size: 14px;\n`;\n\nexport const InputFieldText = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin: 8px 0;\n`;\n\nexport const InputFieldContainer = styled.div`\n  width: 70vw;\n  margin: 0 auto;\n  padding-bottom: ${props => props.collapsed ? '8px' : '16px'};\n  transition-duration: 150ms;\n`;\n\nexport const StyledSelect = styled(Select)`\n  div {\n    ${props => props.error && 'border-color: red;'}\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as Text from '../../constants/uiTexts';\nimport {\n  InputFieldContainer,\n  Label,\n  InputFieldText,\n  ReadOnlyValue,\n  StyledSelect,\n} from './InputField.style';\nimport { stationNames } from '../shortestPathLogics/initializeData';\n\nexport default function InputField(props) {\n  const options = stationNames.map(name => ({\n    value: name,\n    label: name,\n  }));\n  const defaultValue = options[stationNames.indexOf(props.value)]\n  return(\n    <InputFieldContainer collapsed={props.collapsed}>\n      <InputFieldText>\n        <Label collapsed={props.collapsed}>\n          {props.label}\n        </Label>\n        { props.collapsed && <ReadOnlyValue>{props.value}</ReadOnlyValue> }\n      </InputFieldText>\n      { !props.collapsed &&\n        <StyledSelect\n          name={props.name}\n          options={options}\n          defaultValue={defaultValue}\n          onChange={props.onChange}\n          placeholder={Text.SEARCH_PLACEHOLDER}\n          onKeyPress={props.onKeyPress}\n          inputRef={props.setRef}\n          error={props.error}\n        />\n      }\n    </InputFieldContainer>\n  );\n}\n\nInputField.propTypes = {\n  label: PropTypes.string,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.string,\n  collapsed: PropTypes.bool,\n  onKeyPress: PropTypes.func,\n  error: PropTypes.bool,\n}\n","import styled from 'styled-components';\nimport { Button } from '@material-ui/core';\n\nexport const Container = styled.div`\n  background-color: #fffbca;\n  padding: 32px 16px;\n  z-index: 2;\n`;\n\nexport const Header = styled.h4`\n  margin: 0 0 32px;\n  text-align: center;\n`;\n\nexport const PrimaryButton = styled(Button).attrs({\n  variant: 'contained',\n})`\n  && {\n    height: 48px;\n    margin-top: 16px;\n    background-color: #30aabc;\n    color: white;\n    font-weight: bold;\n  }\n`;\n","import InputSection from './InputSection.js';\nexport default InputSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as Text from '../../constants/uiTexts';\nimport InputField from './InputField';\nimport { Container, Header, PrimaryButton } from './InputSection.style';\n\nexport default class InputSection extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startingStation: '',\n      destinationStation: '',\n      error: null,\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onChange(selectedItem, componentProps) {\n    const { value } = selectedItem;\n    const { name: inputName } = componentProps;\n    this.setState({ [inputName]: value, error: null });\n  }\n  \n  onSubmit() {\n    const { startingStation, destinationStation } = this.state;\n    if (!startingStation || !destinationStation) {\n      return this.setState({ error: 'EMPTY_ENTRY' });\n    }\n    this.props.submitAction(startingStation, destinationStation);\n  }\n\n  onClick(e) {\n    // don't fire onClick at Container to keep input field closed\n    e.stopPropagation();\n    this.onSubmit();\n  }\n\n  setDestinationInputRef = ref => this.destInput = ref;\n\n  render() {\n    return (\n      <Container onClick={this.props.onClick}>\n        <Header>\n          {Text.HEADER}\n        </Header>\n        <InputField\n          label=\"Starting station\"\n          name=\"startingStation\"\n          onChange={this.onChange}\n          value={this.state.startingStation}\n          collapsed={this.props.collapsed}\n          onKeyPress={e => e.key === 'Enter' && this.destInput.focus()}\n          error={this.state.error && !this.state.startingStation}\n        />\n        <InputField\n          label=\"Destination station\"\n          name=\"destinationStation\"\n          onChange={this.onChange}\n          value={this.state.destinationStation}\n          collapsed={this.props.collapsed}\n          setRef={this.setDestinationInputRef}\n          onKeyPress={e => e.key === 'Enter' && this.onSubmit()}\n          error={this.state.error && !this.state.destinationStation}\n        />\n        { !this.props.collapsed &&\n          <PrimaryButton fullWidth onClick={this.onClick}>\n            GO!\n          </PrimaryButton>\n        }\n      </Container>\n    );\n  }\n}\n\nInputSection.propTypes = {\n  submitAction: PropTypes.func.isRequired,\n  collapsed: PropTypes.bool,\n}\n","import styled from 'styled-components';\n\nexport const LineContainer = styled.div`\n  display: flex;\n`;\n\nexport const Badge = styled.div.attrs(props => ({\n  children: props.line,\n}))`\n  color: #fff;\n  background-color: ${props => getLineColor(props.line)};\n  font-size: 12px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 24px;\n  padding: 2px 4px;\n  ${LineContainer} > & {\n    height: 18px;\n    &:first-child {\n      border-top-left-radius: 4px;\n      border-bottom-left-radius: 4px;\n    }\n    &:last-child {\n      border-top-right-radius: 4px;\n      border-bottom-right-radius: 4px;\n    }\n  }\n`;\n\nfunction getLineColor(lineCode) {\n  switch(lineCode) {\n    case 'NS': return '#d62821';\n    case 'EW': return '#189e4a';\n    case 'CG': return '#189e4a';\n    case 'NE': return '#844184';\n    case 'CC': return '#f2ad27';\n    case 'CE': return '#f2ad27';\n    case 'DT': return '#0354a6';\n    case 'TE': return '#784008';\n    case 'JS': return '#0099aa';\n    case 'JW': return '#0099aa';\n    case 'JE': return '#0099aa';\n    // case 'BP': return '#a8a8a8';\n    // case 'SW': return '#a8a8a8';\n    // case 'SE': return '#a8a8a8';\n    // case 'PW': return '#a8a8a8';\n    // case 'PE': return '#a8a8a8';\n    default: return '#a8a8a8';\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Badge } from './LineBadge.style';\n\nexport function LineBadge({ line: rawLine }) {\n  if (rawLine.indexOf('/') === -1) {\n    return <Badge line={rawLine} />;\n  } else if (rawLine.indexOf('CC') !== -1) {\n    return <Badge line={'CC'} />;\n  } else {\n    return rawLine.split('/').map(optionalLine =>\n      <Badge line={optionalLine} />\n    );\n  }\n}\n\nLineBadge.propTypes = {\n  line: PropTypes.string.isRequired,\n}\n","import styled from 'styled-components';\nimport { ListItem } from '@material-ui/core';\n\nexport const InlineBadgeContainer = styled.div`\n  display: flex;\n  margin: 0 4px;\n`;\nexport const StyledListItem = styled(ListItem)`\n  && {\n    justify-content: space-between;\n    font-size: 14px;\n  }\n`;\n\nexport const StopCount = styled.span`\n  font-size: 12px;\n  color: #555;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LineBadge, LineContainer } from '../../components/LineBadge';\nimport {\n  StyledListItem,\n  InlineBadgeContainer,\n  StopCount,\n} from './Step.style';\n\nexport default function Step(props) {\n  const { line, destination, stopCount } = props.step;\n  return (\n    <StyledListItem>\n      <LineContainer>\n        <div>Take </div>\n        <InlineBadgeContainer><LineBadge line={line} /></InlineBadgeContainer>\n        <div>{` to ${destination}`}</div>\n      </LineContainer>\n      <StopCount>{`${stopCount} stop${stopCount > 1 ? 's' : ''}`}</StopCount>\n    </StyledListItem>\n  );\n}\n\nStep.propTypes = {\n  step: PropTypes.shape({\n    line: PropTypes.string.isRequired,\n    destination: PropTypes.string.isRequired,\n    stopCount: PropTypes.number.isRequired,\n  }).isRequired,\n}\n","import styled from 'styled-components';\nimport { List, ListItem, ListItemText } from '@material-ui/core';\n\nexport const Container = styled.div`\n  border-left: 4px solid ${props => props.expanded ? '#ccc' : 'transparent'};\n  ${props => props.expanded && 'background-color: #f1f1f1;'}\n`;\n\nexport const ExpandableHeader = styled(ListItemText)`\n  & > span {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n`;\n\nexport const StepsContainer = styled(List)`\n  && {\n    border-top: 1px solid #c8c8c8;\n    margin-left: 16px;\n    padding-bottom: 32px;\n  }\n`;\n\nexport const Option = styled(ListItem)`\n`;\n\nexport const LineOverview = styled.div`\n  display: flex;\n  overflow: scroll;\n  position: relative;\n`;\n\nexport const StopOverview = styled.div`\n  font-size: 12px;\n  line-height: 1em;\n  color: #555;\n  text-align: right;\n  white-space: nowrap;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LineBadge } from '../../components/LineBadge';\nimport { Collapse } from '@material-ui/core';\nimport { ExpandLess, ExpandMore, ChevronRight } from '@material-ui/icons';\nimport Step from './Step';\nimport {\n  Container,\n  Option,\n  LineOverview,\n  StopOverview,\n  StepsContainer,\n  ExpandableHeader,\n} from './OptionExpandable.style';\n\nexport default function OptionExpandable(props) {\n  const { lines, stopCount, interchangeCount } = props.option;\n  const stopOverview = `${stopCount} stop${stopCount > 1 ? 's' : ''}`;\n  const changeOverview = interchangeCount ? `${interchangeCount} int.` : '';\n  return (\n    <Container expanded={props.expanded}>\n      <Option button onClick={props.onClick}>\n        <ExpandableHeader>\n          <LineOverview>\n            { lines.map((lineCode, i) => (\n              <React.Fragment key={i}>\n                <ChevronRight />\n                <LineBadge line={lineCode} />\n              </React.Fragment>\n            ))}\n          </LineOverview>\n          <StopOverview>\n            <div>{stopOverview}</div>\n            <div>{changeOverview}</div>\n          </StopOverview>\n        </ExpandableHeader>\n        {props.expanded ? <ExpandLess /> : <ExpandMore />}\n      </Option>\n      <Collapse in={props.expanded}>\n        <StepsContainer>\n          {props.option.steps.map((step, i) =>\n            <Step step={step} key={i} />\n          )}\n        </StepsContainer>\n      </Collapse>\n    </Container>\n  );\n}\n\nOptionExpandable.propTypes = {\n  option: PropTypes.shape({\n    lines: PropTypes.array.isRequired,\n    stopCount: PropTypes.number.isRequired,\n    interchangeCount: PropTypes.number,\n  }).isRequired,\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { List, ListSubheader } from '@material-ui/core';\nimport OptionExpandable from './OptionExpandable';\nimport * as Text from '../../constants/uiTexts';\n\nexport default class RoutesSection extends React.Component {\n  render() {\n    return (\n      <Container>\n        <StyledList>\n          <StyledListSubheader>{Text.LIST_HEADER}</StyledListSubheader>\n          <div>\n            {this.props.routeOptions.map((option, i) =>\n              <OptionExpandable\n                option={option}\n                expanded={this.props.expandedIndex === i}\n                onClick={() => this.props.onClickExpandable(i)}\n                key={i}\n              />\n            )}\n          </div>\n        </StyledList>\n      </Container>\n    );\n  }\n}\n\nRoutesSection.propTypes = {\n  routeOptions: PropTypes.array.isRequired,\n}\n\nconst Container = styled.div`\n  // background-color: #fafafa;\n  padding: 0 16px 16px;\n  flex: 1;\n  overflow: scroll;\n`;\n\nconst StyledList = styled(List)`\n  && {\n    padding-top: 0;    \n  }\n`;\n\nconst StyledListSubheader = styled(ListSubheader)`\n  && {\n    background-color: white;\n  }\n`;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport findShortestRoute from './modules/shortestPathLogics';\nimport InputSection from './modules/InputSection';\nimport RoutesSection from './modules/RoutesSection';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      routeOptions: [],\n      isInputCollapsed: false,\n      expandedIndex: 0,\n    };\n    this.onSearch = this.onSearch.bind(this);\n    this.collapseInput = this.collapseInput.bind(this);\n    this.onClickExpandable = this.onClickExpandable.bind(this);\n  }\n\n  onSearch(start, end) {\n    const routeOptions = findShortestRoute(start, end);\n    this.setState({ routeOptions, expandedIndex: 0 });\n    this.collapseInput();\n  }\n\n  collapseInput() {\n    this.setState({ isInputCollapsed: true });\n  }\n\n  onClickExpandable(index) {\n    if (this.state.expandedIndex === index) {\n      this.setState({ expandedIndex: null });\n    } else {\n      this.setState({ expandedIndex: index });\n      this.collapseInput();\n    }\n  }\n\n  render() {\n    const { routeOptions, isInputCollapsed } = this.state;\n    const hasResult = (routeOptions.length > 0);\n    return (\n      <Home>\n        <InputSection\n          collapsed={isInputCollapsed}\n          submitAction={this.onSearch}\n          onClick={() => this.setState({ isInputCollapsed: false })}\n        />\n        { hasResult &&\n          <RoutesSection\n            routeOptions={routeOptions}\n            collapseInput={this.collapseInput}\n            onClickExpandable={this.onClickExpandable}\n            expandedIndex={this.state.expandedIndex}\n          />\n        }\n      </Home>\n    );\n  }\n}\n\nconst Home = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}