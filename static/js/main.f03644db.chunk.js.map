{"version":3,"sources":["modules/shortestPathLogics/dijkstra.js","modules/shortestPathLogics/initializeData.js","modules/shortestPathLogics/index.js","constants/uiTexts.js","modules/InputSection.js","modules/RoutesSection/LineBadge.js","modules/RoutesSection/Step.js","modules/RoutesSection/OptionExpandable.js","modules/RoutesSection/index.js","App.js","serviceWorker.js","index.js"],"names":["dijkstra","graph","startNode","endNode","distances","Object","defineProperty","prevs","destinationReached","_loop","nodeDistances","currentNodeName","keys","reduce","a","b","adjacent","previousNodes","filter","station","prev","name","length","findNeighborNodes","forEach","neighbor","undefined","neighborsPreviousStations","newNeighborsPreviousStation","line","neighborDistance","push","builtRoutes","initialPath","tracePath","listOfAllPrevNodes","destination","builtPath","i","newPath","toConsumableArray","_prevs$i","_prevs$","lines","EW","NS","NE","DT","CC","CE","CG","TE","JS","JW","JE","SE","SW","PE","PW","BP","stationNames","stations","stationLine","stationNumber","Array","isArray","number","stationWithAdjacent","stationCode","findAdjacent","lineCode","no","builtAdjacent","stationsinLine","prevStation","nextStation","checkDupicateAndPushAdjacent","newAdjacent","sort","join","findAdjacentInLine","addSteps","route","currentSteps","steps","stopCount","addNewInterchange","interchangeCount","console","log","stationMap","SEARCH_PLACEHOLDER","InputSection","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setDestinationInputRef","ref","destInput","state","startingStation","destinationStation","onChange","bind","assertThisInitialized","onSubmit","onClick","selectedItem","componentProps","value","inputName","setState","_this$state","submitAction","e","stopPropagation","_this2","react_default","createElement","Container","InputField","label","collapsed","onKeyPress","key","focus","setRef","PrimaryButton","fullWidth","React","PureComponent","options","map","defaultValue","indexOf","InputFieldContainer","InputFieldText","Label","ReadOnlyValue","StationInput","placeholder","Text","inputRef","styled","div","_templateObject","_templateObject2","span","_templateObject3","_templateObject4","Select","_templateObject5","_templateObject6","Button","attrs","variant","color","_templateObject7","LineBadge","_ref","rawLine","Badge","split","optionalLine","LineContainer","LineBadge_templateObject","children","LineBadge_templateObject2","getLineColor","Step","_props$step","step","StyledListItem","InlineBadgeContainer","concat","StopCount","Step_templateObject","ListItem","Step_templateObject2","Step_templateObject3","OptionExpandable","_props$option","option","stopOverview","changeOverview","OptionExpandable_Container","expanded","Option","button","ExpendableHeader","LineOverview","Fragment","icons_index_es","StopOverview","index_es","in","StepsContainer","OptionExpandable_templateObject","ListItemText","OptionExpandable_templateObject2","List","OptionExpandable_templateObject3","OptionExpandable_templateObject4","OptionExpandable_templateObject5","OptionExpandable_templateObject6","RoutesSection","RoutesSection_Container","subheader","routeOptions","expandedIndex","onClickExpandable","Component","RoutesSection_templateObject","App","isInputCollapsed","onSearch","collapseInput","start","end","paths","JSON","parse","stringify","path","previousLine","_path$pop","pop","splittedCurrentLine","splittedPreviousLine","intersects","findShortestRoute","index","hasResult","Home","InputSection_InputSection","RoutesSection_RoutesSection","App_templateObject","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f03644db.chunk.js","sourcesContent":["export default function dijkstra(graph, startNode, endNode) {\n  const distances = { [startNode]: 0 };\n  const prevs = {};\n  let destinationReached = false;\n  let shortestDistance = 999; // For testing purpose\n  do {\n    // TODO: instead of relying on lowest distance,\n    // we can just iterate all the neighbor we have from source node\n    // and then change distances const to be a list of visited nodes (?)\n    const currentNodeName = findLowestDistanceNode(distances);\n    if(currentNodeName === endNode) {\n      // TODO make threshold to allow searching for less efficient routes\n      // e.g. ~3 stops\n      destinationReached = true;\n      shortestDistance = distances[currentNodeName]; // For testing purpose\n    }\n    findNeighborNodes(graph, currentNodeName, prevs).forEach(neighbor => {\n      // If you're from Chinatown , you can take either NE-EW or DT-CC to Paya Lebar\n      // then Paya Lebar should store 2 (or more) prevs\n      if (prevs[neighbor.name] === undefined) prevs[neighbor.name] = [];\n      const neighborsPreviousStations = prevs[neighbor.name];\n      const newNeighborsPreviousStation = { name: currentNodeName, line: neighbor.line };\n      const neighborDistance = distances[currentNodeName] + 1;\n      distances[neighbor.name] = neighborDistance; // TODO: later we wont need distance\n      neighborsPreviousStations.push(newNeighborsPreviousStation);\n    });\n    delete distances[currentNodeName]; // dont do this if we want to have some less efficient routes\n  } while(!destinationReached && Object.keys(prevs).length < 200);\n  if (!destinationReached) throw 'Destination not reached'; // For testing\n  const builtRoutes = [];\n  const initialPath = [];\n  builtRoutes.push(initialPath);\n  tracePath(prevs, endNode, builtRoutes, initialPath);\n  // if (shortestDistance !== path.length) throw `the result is different from path : Expected ${shortestDistance}. Path: ${path}`; // For testing\n  return builtRoutes;\n}\n\nfunction tracePath(listOfAllPrevNodes, destination, builtRoutes, builtPath) {\n  const prevs = listOfAllPrevNodes[destination];\n  // if there's no prev left, end the loop;\n  if(!prevs) return;\n  // make a new path for each prev except #1 prev\n  for(let i = 1; i < prevs.length; i++) { // iterate from index = 1\n    const newPath = [...builtPath];\n    const { name, line } = prevs[i];\n    newPath.push({ destination, line });\n    builtRoutes.push(newPath);\n    tracePath(listOfAllPrevNodes, name, builtRoutes, newPath);\n  }\n  // push 1st prev last, to avoid affecting the remaining path\n  const { name, line } = prevs[0];\n  builtPath.push({ destination, line });\n  tracePath(listOfAllPrevNodes, name, builtRoutes, builtPath);\n}\n\nfunction findLowestDistanceNode(nodeDistances) {\n  return Object\n    .keys(nodeDistances)\n    .reduce((a, b) => nodeDistances[a] < nodeDistances[b] ? a : b);\n}\n\nfunction findNeighborNodes(graph, currentNodeName, prevs) {\n  const { adjacent } = graph[currentNodeName];\n  // return all neighbor, but dont go back to prev node\n  const previousNodes = prevs[currentNodeName] || [];\n  return adjacent.filter(station => // can't use Array.prototype.includes :(\n    previousNodes.filter(prev => prev.name === station.name).length === 0\n    // previousNodes.reduce((result, prev) => result && prev.name !== station.name, true)\n  );\n}\n","import stations from '../../data/stations.json';\n\nconst lines = {\n  EW: [],\n  NS: [],\n  NE: [],\n  DT: [],\n  CC: [],\n  CE: [],\n  CG: [],\n  TE: [],\n  JS: [],\n  JW: [],\n  JE: [],\n  SE: [],\n  SW: [],\n  PE: [],\n  PW: [],\n  BP: [],\n};\n\nexport const stationNames = Object.keys(stations);\n\n// assign every station to their lines\nstationNames.forEach(name => {\n  Object.keys(stations[name]).forEach(line => {\n    const stationLine = lines[line];\n    let stationNumber = stations[name][line];\n    if (Array.isArray(stationNumber)) {\n      stationNumber.forEach(number => {\n        stationLine[number] = name;\n      });\n    } else {\n      stationLine[stationNumber] = name;\n    }\n  });\n});\n\nconst stationWithAdjacent = {};\nstationNames.forEach(name => {\n  const stationCode = stations[name];\n  stationWithAdjacent[name] = {\n    line: Object.keys(stationCode),\n    adjacent: findAdjacent(stationCode),\n  };\n});\n\nexport default stationWithAdjacent;\n\nfunction findAdjacent(stationCode) {\n  const adjacent = [];\n  Object.keys(stationCode).forEach(lineCode => {\n    const stationNo = stationCode[lineCode];\n    findAdjacentInLine(lineCode, stationNo, adjacent);\n  });\n  // adjacent.push(...findSpecialAdjacent(stationCode));\n  return adjacent;\n}\n\nfunction findAdjacentInLine(line, no, builtAdjacent) {\n  const stationsinLine = lines[line];\n  let prevStation = stationsinLine[no - 1] || stationsinLine[no - 2];\n  let nextStation = stationsinLine[no + 1] || stationsinLine[no + 2];\n  checkDupicateAndPushAdjacent(builtAdjacent, prevStation);\n  checkDupicateAndPushAdjacent(builtAdjacent, nextStation);\n\n  function checkDupicateAndPushAdjacent(builtAdjacent, newAdjacent) {\n    // before push, check whether we already have this adjacent o'not\n    builtAdjacent.forEach(station => {\n      if(station.name === newAdjacent) {\n        newAdjacent = null;\n        station.line = [line, station.line].sort().join('/');\n        // make the multiple station.line = 'CC/CE', not 'CE/CC'\n      }\n    });\n    newAdjacent && builtAdjacent.push({ name: newAdjacent, line });\n    // if there's no adjacent node, it won't push anything\n  }\n}\n\n// function findSpecialAdjacent() {\n//   // TODO: special adjacent, for example:\n//   // 'Gek Poh' JW1 is adjacent with 'Bahar Junction' JS7\n//   // please see Jurong Area MRT\n//   return [];\n// }\n","import dijkstra from './dijkstra';\nimport stationMap from './initializeData';\n\nconsole.log(stationMap)\nexport default function findShortestRoute(startingStation, destinationStation) {\n  // currently can't connect all MRT line to Jurong lines and all LRTs\n  const paths = dijkstra(stationMap, startingStation, destinationStation);\n  console.log('result paths', JSON.parse(JSON.stringify(paths)));\n  return paths.map( path => {\n    const route = {\n      lines: [],\n      stopCount: path.length,\n      interchangeCount: -1,\n      steps: [],\n    };\n    let previousLine = '';\n    while(path.length) {\n      let { destination, line } = path.pop();\n      // somehow i feel we can simplify this nested conditions but just havn't find it\n      if (line !== previousLine) {\n        if (line.indexOf('/') > 1 || previousLine.indexOf('/') > 1) {\n          const splittedCurrentLine = line.split('/');\n          const splittedPreviousLine = previousLine.split('/');\n          // find intersection between 2 arrays\n          const intersects = splittedCurrentLine\n            .filter(line => -1 !== splittedPreviousLine.indexOf(line));\n          if (intersects.length) { // still in the same line, no need to interchange\n            addSteps(route, destination);\n            // it works for current MRT line,\n            // unless if there's another wierd overlapping lines in the future\n            route.lines[route.lines.length -1] = intersects[0];\n            route.steps[route.steps.length - 1].line = intersects[0];\n            previousLine = intersects[0];\n          } else {\n            addNewInterchange(route, destination, line);\n            previousLine = line;\n          }\n        } else {\n          addNewInterchange(route, destination, line);\n          previousLine = line;\n        }\n      } else {\n        addSteps(route, destination);\n      }\n    }\n    return route;\n    // TODO: sort based on best route\n  });\n}\n\nfunction addSteps(route, destination) {\n  const currentSteps = route.steps[route.steps.length - 1];\n  currentSteps.destination = destination;\n  currentSteps.stopCount++;\n}\n\nfunction addNewInterchange(route, destination, line) {\n  route.lines.push(line);\n  route.steps.push({\n    line,\n    destination,\n    stopCount: 1,\n  });\n  route.interchangeCount++;\n}\n","export const SEARCH_PLACEHOLDER = 'Search for station, e.g: Rochor';\nexport const LIST_HEADER = 'Route options';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport styled from 'styled-components';\nimport { Button } from '@material-ui/core';\nimport * as Text from '../constants/uiTexts';\nimport { stationNames } from './shortestPathLogics/initializeData';\n\nexport default class InputSection extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startingStation: '',\n      destinationStation: '',\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onChange(selectedItem, componentProps) {\n    const { value } = selectedItem;\n    const { name: inputName } = componentProps;\n    this.setState({ [inputName]: value });\n  }\n  \n  onSubmit() {\n    const { startingStation, destinationStation } = this.state;\n    this.props.submitAction(startingStation, destinationStation);\n  }\n\n  onClick(e) {\n    // don't fire onClick at Container to keep input field closed\n    e.stopPropagation();\n    this.onSubmit();\n  }\n\n  setDestinationInputRef = ref => this.destInput = ref;\n\n  render() {\n    console.log(this.state)\n    return (\n      <Container onClick={this.props.onClick}>\n        <InputField\n          label=\"Starting station\"\n          name=\"startingStation\"\n          onChange={this.onChange}\n          value={this.state.startingStation}\n          collapsed={this.props.collapsed}\n          onKeyPress={e => e.key === 'Enter' && this.destInput.focus()}\n        />\n        <InputField\n          label=\"Destination station\"\n          name=\"destinationStation\"\n          onChange={this.onChange}\n          value={this.state.destinationStation}\n          collapsed={this.props.collapsed}\n          setRef={this.setDestinationInputRef}\n          onKeyPress={e => e.key === 'Enter' && this.onSubmit()}\n        />\n        { !this.props.collapsed &&\n          <PrimaryButton fullWidth onClick={this.onClick}>\n            Go\n          </PrimaryButton>\n        }\n      </Container>\n    );\n  }\n}\n\nfunction InputField(props) {\n  const options = stationNames.map(name => ({\n    value: name,\n    label: name,\n  }));\n  const defaultValue = options[stationNames.indexOf(props.value)]\n  return(\n    <InputFieldContainer collapsed={props.collapsed}>\n      <InputFieldText>\n        <Label collapsed={props.collapsed}>\n          {props.label}\n        </Label>\n        { props.collapsed && <ReadOnlyValue>{props.value}</ReadOnlyValue> }\n      </InputFieldText>\n      { !props.collapsed &&\n        <StationInput\n          name={props.name}\n          options={options}\n          defaultValue={defaultValue}\n          onChange={props.onChange}\n          placeholder={Text.SEARCH_PLACEHOLDER}\n          onKeyPress={props.onKeyPress}\n          inputRef={props.setRef}\n        />\n      }\n    </InputFieldContainer>\n  );\n}\nInputSection.propTypes = {\n  submitAction: PropTypes.func.isRequired,\n  collapsed: PropTypes.bool,\n}\n\nconst Container = styled.div`\n  background-color: lightblue;\n  padding: 32px 16px;\n`;\n\nconst Label = styled.div`\n  font-size: 13px;\n  font-weight: bold;\n  text-align: left;\n`;\n\nconst ReadOnlyValue = styled.span`\n  font-size: 14px;\n`;\n\nconst InputFieldText = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin: 8px 0;\n`;\n\nconst StationInput = styled(Select)`\n  width: calc(100% - 16px);\n  border: solid gray .2px;\n  padding: 8px;\n`;\n\nconst InputFieldContainer = styled.div`\n  width: 70vw;\n  margin: 0 auto;\n  padding-bottom: ${props => props.collapsed ? '8px' : '32px'};\n  transition-duration: 150ms;\n`;\n\nconst PrimaryButton = styled(Button).attrs({\n  variant: 'contained',\n  color: 'primary',\n})`\n  height: 48px;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport function LineBadge({ line: rawLine }) {\n  if (rawLine.indexOf('/') === -1) {\n    return <Badge line={rawLine} />;\n  } else if (rawLine.indexOf('CC') !== -1) {\n    return <Badge line={'CC'} />;\n  } else {\n    return rawLine.split('/').map(optionalLine =>\n      <Badge line={optionalLine} />\n    );\n  }\n}\n\n\nexport const LineContainer = styled.div`\n  display: flex;\n`;\n\nexport const Badge = styled.div.attrs(props => ({\n  children: props.line,\n}))`\n  color: #fff;\n  background-color: ${props => getLineColor(props.line)};\n  font-size: 12px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 24px;\n  padding: 2px 4px;\n  ${LineContainer} > & {\n    height: 18px;\n    &:first-child {\n      border-top-left-radius: 4px;\n      border-bottom-left-radius: 4px;\n    }\n    &:last-child {\n      border-top-right-radius: 4px;\n      border-bottom-right-radius: 4px;\n    }\n  }\n`;\n\nfunction getLineColor(lineCode) {\n  switch(lineCode) {\n    case 'NS': return '#d62821';\n    case 'EW': return '#189e4a';\n    case 'CG': return '#189e4a';\n    case 'NE': return '#844184';\n    case 'CC': return '#f2ad27';\n    case 'CE': return '#f2ad27';\n    case 'DT': return '#0354a6';\n    case 'TE': return '#784008';\n    // case 'JS': return '#a8a8a8';\n    // case 'JW': return '#a8a8a8';\n    // case 'JE': return '#a8a8a8';\n    // case 'BP': return '#a8a8a8';\n    // case 'SW': return '#a8a8a8';\n    // case 'SE': return '#a8a8a8';\n    // case 'PW': return '#a8a8a8';\n    // case 'PE': return '#a8a8a8';\n    default: return '#a8a8a8';\n  }\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { ListItem, ListItemText } from '@material-ui/core';\nimport { LineBadge, LineContainer } from './LineBadge';\n\nexport default function Step(props) {\n  const { line, destination, stopCount } = props.step;\n  return (\n    <StyledListItem>\n      <LineContainer>\n        <div>Take </div>\n        <InlineBadgeContainer><LineBadge line={line} /></InlineBadgeContainer>\n        <div>{` to ${destination}`}</div>\n      </LineContainer>\n      <StopCount>{`${stopCount} stop${stopCount > 1 ? 's' : ''}`}</StopCount>\n    </StyledListItem>\n  );\n}\n\nconst InlineBadgeContainer = styled.div`\n  display: flex;\n  margin: 0 4px;\n`;\nconst StyledListItem = styled(ListItem)`\n  && {\n    justify-content: space-between;\n    font-size: 14px;\n  }\n`;\n\nconst StopCount = styled.span`\n  font-size: 12px;\n  color: #555;\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { LineBadge } from './LineBadge';\nimport { Collapse, List, ListItem, ListItemText } from '@material-ui/core';\nimport { ExpandLess, ExpandMore, ChevronRight } from '@material-ui/icons';\nimport Step from './Step';\n\nexport default function OptionExpandable(props) {\n  const { lines, stopCount, interchangeCount } = props.option;\n  const stopOverview = `${stopCount} stop${stopCount > 1 ? 's' : ''}`;\n  const changeOverview = interchangeCount ? `${interchangeCount} int.` : '';\n  return (\n    <Container expanded={props.expanded}>\n      <Option button onClick={props.onClick}>\n        <ExpendableHeader>\n          <LineOverview>\n            { lines.map((lineCode, i) => (\n              <React.Fragment key={i}>\n                <ChevronRight />\n                <LineBadge line={lineCode} />\n              </React.Fragment>\n            ))}\n          </LineOverview>\n          <StopOverview>\n            <div>{stopOverview}</div>\n            <div>{changeOverview}</div>\n          </StopOverview>\n        </ExpendableHeader>\n        {props.expanded ? <ExpandLess /> : <ExpandMore />}\n      </Option>\n      <Collapse in={props.expanded}>\n        <StepsContainer>\n          {props.option.steps.map((step, i) =>\n            <Step step={step} key={i} />\n          )}\n        </StepsContainer>\n      </Collapse>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  border-left: 4px solid ${props => props.expanded ? '#ccc' : 'transparent'};\n  ${props => props.expanded && 'background-color: #f1f1f1;'}\n`;\n\nconst ExpendableHeader = styled(ListItemText)`\n  & > span {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n`;\n\nconst StepsContainer = styled(List)`\n  && {\n    border-top: 1px solid #c8c8c8;\n    margin-left: 16px;\n    padding-bottom: 32px;\n  }\n`;\n\nconst Option = styled(ListItem)`\n`;\n\nconst LineOverview = styled.div`\n  display: flex;\n  overflow: scroll;\n  position: relative;\n  &:before {\n    content:'';\n    width: 100%;\n    height: 100%;    \n    position: absolute;\n    right:0;\n    top:0;\n    background: linear-gradient(to right, transparent 80%, #f1f1f1);\n  }\n  &:after {\n    background: linear-gradient(\n      to right,\n      rgba(255, 255, 255, 0) 0%,\n      #f00 100%\n      // rgba(255, 255, 255, 1) 100%\n    );\n  }\n`;\n\nconst StopOverview = styled.div`\n  font-size: 12px;\n  line-height: 1em;\n  color: #555;\n  text-align: right;\n  white-space: nowrap;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { List, ListSubheader } from '@material-ui/core';\nimport OptionExpandable from './OptionExpandable';\nimport * as Text from '../../constants/uiTexts';\n\nexport default class RoutesSection extends React.Component {\n  render() {\n    return (\n      <Container>\n        <List subheader={<ListSubheader>{Text.LIST_HEADER}</ListSubheader>}>\n          {this.props.routeOptions.map((option, i) =>\n            <OptionExpandable\n              option={option}\n              expanded={this.props.expandedIndex === i}\n              onClick={() => this.props.onClickExpandable(i)}\n              key={i}\n            />\n          )}\n        </List>\n      </Container>\n    );\n  }\n}\n\nRoutesSection.propTypes = {\n  routeOptions: PropTypes.array.isRequired,\n}\n\nconst Container = styled.div`\n  // background-color: #fafafa;\n  padding: 16px;\n`;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport findShortestRoute from './modules/shortestPathLogics';\nimport InputSection from './modules/InputSection';\nimport RoutesSection from './modules/RoutesSection';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      routeOptions: [],\n      isInputCollapsed: false,\n      expandedIndex: 0,\n    };\n    this.onSearch = this.onSearch.bind(this);\n    this.collapseInput = this.collapseInput.bind(this);\n    this.onClickExpandable = this.onClickExpandable.bind(this);\n  }\n\n  onSearch(start, end) {\n    const routeOptions = findShortestRoute(start, end);\n    this.setState({ routeOptions, expandedIndex: 0 });\n    this.collapseInput();\n  }\n\n  collapseInput() {\n    this.setState({ isInputCollapsed: true });\n  }\n\n  onClickExpandable(index) {\n    if (this.state.expandedIndex === index) {\n      this.setState({ expandedIndex: null });\n    } else {\n      this.setState({ expandedIndex: index });\n      this.collapseInput();\n    }\n  }\n\n  render() {\n    const { routeOptions, isInputCollapsed } = this.state;\n    const hasResult = (routeOptions.length > 0);\n    return (\n      <Home>\n        <InputSection\n          collapsed={isInputCollapsed}\n          submitAction={this.onSearch}\n          onClick={() => this.setState({ isInputCollapsed: false })}\n        />\n        { hasResult &&\n          <RoutesSection\n            routeOptions={routeOptions}\n            collapseInput={this.collapseInput}\n            onClickExpandable={this.onClickExpandable}\n            expandedIndex={this.state.expandedIndex}\n          />\n        }\n      </Home>\n    );\n  }\n}\n\nconst Home = styled.div`\n  // display: flex;\n  // height: 100vh;\n  // flex-direction: column;\n  // justify-content: center;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}